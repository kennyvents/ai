import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ===== –≤–∞—à–∏ –∏–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ =====
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ —Å –ø–∞–ø–∫–æ–π utils –µ—Å—Ç—å –≤ PYTHONPATH (–∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –±–æ—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)
from utils.data_utils import read_data, normalize_data, get_result
from utils.match_finder import find_top_matches
from utils.excel_log import get_top_ent

# ---------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
log = logging.getLogger("excel-bot")

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env")

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã Excel
EXCEL_MIME_TYPES = {
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",  # .xlsx
    "application/vnd.ms-excel",  # .xls
}
EXCEL_EXTS = {"xlsx", "xls"}

# –ü—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
FILES_DIR = "files"
RESULTS_DIR = os.path.join(FILES_DIR, "results")
os.makedirs(FILES_DIR, exist_ok=True)
os.makedirs(RESULTS_DIR, exist_ok=True)

INCOMING_XLSX = os.path.join(FILES_DIR, "–∑–∞—è–≤–∫–∞.xlsx")
FINAL_XLSX = os.path.join(RESULTS_DIR, "finally_results.xlsx")  # –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–º


# ---------- —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ----------
def process_excel() -> str:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞—à –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É —Ñ–∞–π–ª—É (FINAL_XLSX).
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ read_data('modified_prices', '–∑–∞—è–≤–∫–∞') –ø—Ä–æ—á–∏—Ç–∞–µ—Ç:
      - prices –∏–∑ 'files/modified_prices.xlsx'
      - –∑–∞—è–≤–∫—É –∏–∑ 'files/–∑–∞—è–≤–∫–∞.xlsx'
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é read_data / –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
    """
    # 1) —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = read_data('modified_prices', '–∑–∞—è–≤–∫–∞')   # <-- –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
    # 2) –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    data = normalize_data(data[0], data[1])
    # 3) –ø–æ–∏—Å–∫, —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–≤–æ–¥–∫–∞
    result_data = find_top_matches(data[0], data[1], data[2])
    get_result(result_data)
    # get_top_ent, —Å—É–¥—è –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ, –∫–ª–∞–¥—ë—Ç .xlsx –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
    # –ü—Ä–∏–º–µ—Ä –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø—É—Ç–µ–π: 'files/results/emb_results' –∏ 'files/results/finally_results'
    get_top_ent('files/results/emb_results', 'files/results/finally_results')

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    # –ï—Å–ª–∏ get_top_ent —Å–æ–∑–¥–∞—ë—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∞—á–µ ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –ø–æ–¥ FINAL_XLSX
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Ç–∞–∫ –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ‚Äî —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
    if not os.path.exists(FINAL_XLSX):
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π .xlsx –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ –∏ –ø—Ä–∏–Ω—è—Ç—å –µ–≥–æ –∑–∞ –∏—Ç–æ–≥
        generated = [f for f in os.listdir(RESULTS_DIR) if f.lower().endswith(".xlsx")]
        if len(generated) == 1:
            src = os.path.join(RESULTS_DIR, generated[0])
            if src != FINAL_XLSX:
                os.replace(src, FINAL_XLSX)
        elif len(generated) > 1:
            # –ë–µ—Ä—ë–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
            latest = max(
                (os.path.join(RESULTS_DIR, f) for f in generated),
                key=lambda p: os.path.getmtime(p)
            )
            os.replace(latest, FINAL_XLSX)

    if not os.path.exists(FINAL_XLSX):
        raise FileNotFoundError(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ get_top_ent –ø–∏—à–µ—Ç .xlsx –≤ 'files/results/finally_results.xlsx' "
            "–∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏–∫—É –≤—ã—à–µ."
        )
    return FINAL_XLSX


# ---------- handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ Excel —Å –∑–∞—è–≤–∫–æ–π(.xlsx/.xls).\n"
        "–ê —è –≤–µ—Ä–Ω—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã "
        "P.S –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    )
    await update.message.reply_text(msg, parse_mode=ParseMode.HTML)


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç Excel, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ 'files/–∑–∞—è–≤–∫–∞.xlsx', –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —à–ª—ë—Ç 'finally_results.xlsx'."""
    print(update.message.from_user.name)
    doc = update.message.document
    if not doc:
        return

    filename = doc.file_name or "file"
    ext = (filename.rsplit(".", 1)[-1].lower() if "." in filename else "")
    is_excel = (ext in EXCEL_EXTS) or (doc.mime_type in EXCEL_MIME_TYPES if doc.mime_type else False)
    if not is_excel:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Excel. –ü—Ä–∏—à–ª–∏—Ç–µ .xlsx –∏–ª–∏ .xls.")
        return

    # 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª —Å—Ç—Ä–æ–≥–æ –ø–æ–¥ INCOMING_XLSX
    file = await doc.get_file()
    await file.download_to_drive(custom_path=INCOMING_XLSX)
    log.info("–í—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", INCOMING_XLSX)
    await update.message.reply_text("üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    # 2) –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º asyncio loop)
    try:
        result_path = await asyncio.to_thread(process_excel)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return

    # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
    try:
        with open(result_path, "rb") as f:
            await update.message.reply_document(
                document=f,
                filename=os.path.basename(result_path),
                caption="‚úÖ –ì–æ—Ç–æ–≤–æ: –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª."
            )
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞—à—ë–ª –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {e}")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ Excel, —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é –∏ –≤–µ—Ä–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç üôÇ")


# ---------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(~filters.Document.ALL, unknown))

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
